// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transformer should transform the AST ava style 1`] = `
"const {cucumber} = require(\\"stucumber\\");
         const _cucumber = cucumber.clone();const feature = {\\"name\\":\\"background steps\\",\\"annotations\\":[],\\"meta\\":{}, \\"filename\\": __filename};const scenarios = [{\\"name\\":\\"this is a test\\",\\"annotations\\":[],\\"meta\\":{}, \\"feature\\": feature, \\"steps\\": [{\\"name\\":\\"something\\",\\"line\\":8,\\"keyword\\":\\"Given\\"}]}];let world;let index = 0;test.before(() => {_cucumber.enterFeature(feature);
      });test.after(() => _cucumber.exitFeature(feature));beforeEach(async () => {world = await _cucumber.createWorld();return _cucumber.enterScenario(world, scenarios[index])});afterEach(async () => {_cucumber.exitScenario(world, scenarios[index]);index++;});test(\\"background steps > this is a test\\", () => {return Promise.resolve().then(() => _cucumber.rule(world, \\"a thing\\", null)).then(() => _cucumber.rule(world, \\"I do a thing\\", null)).then(() => _cucumber.rule(world, \\"something happens\\", null)).then(() => _cucumber.rule(world, \\"something\\", null))});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuZmVhdHVyZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQztBQUFBLDRDQUFRO0FBQUEsb1FBTUcscUZBSkYsc0NBSUUsYUFISCwyQ0FHRyxhQUZILGdEQUVHLGFBQ0Ysd0NBREUiLCJmaWxlIjoidGVzdC5mZWF0dXJlIn0="
`;

exports[`transformer should transform the AST jest-style 1`] = `
"const {cucumber} = require(\\"stucumber\\");
         const _cucumber = cucumber.clone();describe(\\"Feature: test feature\\", () => {const feature = {\\"name\\":\\"test feature\\",\\"annotations\\":[],\\"meta\\":{}, \\"filename\\": __filename};const scenarios = [{\\"name\\":\\"test scenario\\",\\"annotations\\":[],\\"meta\\":{}, \\"feature\\": feature, \\"steps\\": [{\\"name\\":\\"test rule\\",\\"line\\":4,\\"keyword\\":\\"\\"},{\\"name\\":\\"test rule 2\\",\\"line\\":5,\\"keyword\\":\\"\\"}]}];let world;let index = 0;beforeAll(() => {_cucumber.defineRule(\\"foo bar\\", (world, params) => Promise.resolve().then(() => _cucumber.rule(world, \\"test rule\\", null, params)));_cucumber.enterFeature(feature);
      });afterAll(() => _cucumber.exitFeature(feature));beforeEach(async () => {world = await _cucumber.createWorld();return _cucumber.enterScenario(world, scenarios[index])});afterEach(async () => {_cucumber.exitScenario(world, scenarios[index]);index++;});it(\\"test scenario\\", () => {return Promise.resolve().then(() => _cucumber.rule(world, \\"background\\", null)).then(() => _cucumber.rule(world, \\"test rule\\", null)).then(() => _cucumber.rule(world, \\"test rule 2\\", null))});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuZmVhdHVyZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQztBQUFBLHlaQUVBLGdGQUNBLGdEQURBLEdBRkE7QUFBQSxrUUFFQSwrREFEQSx5Q0FDQSxhQUNBLHdDQURBLGFBRUEsMENBRkEsSUFGQSIsImZpbGUiOiJ0ZXN0LmZlYXR1cmUifQ=="
`;
